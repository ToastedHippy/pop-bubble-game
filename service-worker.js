!function(e){var t={};function n(o){if(t[o])return t[o].exports;var s=t[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(o,s,function(t){return e[t]}.bind(null,s));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=33)}({33:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=null;var o=["/","/index.html","/index.js","/styles/index.css","/assets/images/balloon-red/sprites.json","/assets/images/balloon-red/sprites.png","/assets/images/cloud1.png","/assets/images/cloud2.png","/assets/images/cloud3.png","/assets/images/cloud4.png","/assets/images/cloud5.png","/assets/sounds/balloon-pop.mp3"];self.addEventListener("install",(function(e){e.waitUntil(caches.open("my-site-cache-v1").then((function(e){return console.log("Opened cache"),e.addAll(o)})))})),self.addEventListener("activate",(function(e){console.log("activated"),e.waitUntil(caches.keys().then((function(e){return console.log(e),Promise.all(e.map((function(e){if("my-site-cache-v1"!==e)return console.log("[ServiceWorker] Removing old cache",e),caches.delete(e)})))})))})),self.addEventListener("fetch",(function(e){e.respondWith(caches.open("my-site-cache-v1").then((function(t){return t.match(e.request).then((function(t){return t||fetch(e.request)}))})))}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,